Lists
Definition: Lists are ordered collections of items which can be of mixed types. Lists are mutable, meaning you can modify their contents.
Use Cases: Use lists when you need an ordered collection that might change over time. They're ideal for keeping a sequence of objects that might need to be accessed by their position, or when you need to add or remove items.
Example:

fruits = ['apple', 'banana', 'cherry']
print(fruits)
fruits.append('orange')  # Adding an item
print(fruits)

Tuples
Definition: Tuples are like lists but immutable, meaning once created, their contents cannot be changed. They are ordered and allow duplicate elements.
Use Cases: Use tuples for fixed collections of items. They're perfect for grouping related data and when you need to ensure that data cannot be modified.
Example:

coordinates = (10.0, 20.0)
print(coordinates)
# coordinates[0] = 15.0  # This would result in an error


Dictionaries
Definition: Dictionaries store unordered collections of items in key-value pairs. They are mutable, meaning you can change, add, or remove items after the dictionary has been created.
Use Cases: Use dictionaries when you need to associate keys with values, making it easy to retrieve a value without knowing its index. Ideal for storing and retrieving data where the order of elements is not important.
Example:

person = {'name': 'John', 'age': 30}
print(person)
person['city'] = 'New York'  # Adding a new key-value pair
print(person)

Sets
Definition: Sets are unordered collections of unique elements. They are mutable, but all the elements in a set must be unique.
Use Cases: Use sets when you need to ensure uniqueness for the elements, perform set operations like union, intersection, difference, or simply to remove duplicate values from a sequence.
Example:

colors = {'red', 'blue', 'green', 'red'}  # 'red' is duplicated
print(colors)  # Duplicates will be removed
colors.add('yellow')  # Adding a new element
print(colors)

Summary
Lists and Tuples: Both are ordered collections. Lists are mutable, allowing changes to their content, while tuples are immutable.
Dictionaries: Store key-value pairs for easy retrieval without needing to know an index. The order is not guaranteed (though in Python 3.7 and above, dictionaries maintain insertion order as an implementation detail).
Sets: Unordered collections of unique elements, useful for operations involving uniqueness and set theory.
Each of these structures is suitable for different scenarios, depending on whether you need ordered collections, immutable types, key-value associations, or unique element collections.
